geom_label(aes(label = classes$Class), size = 2, color = "black")
# Perform k-means clustering with the most favored k from automated tools
k = 3
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
fviz_cluster(
kmeans_result,
data = scaled_df_no_outliers,
ellipse.type = "euclid",
star.plot = TRUE,
repel = TRUE,
ggtheme = theme_minimal()
)
# Plot clusters
fviz_cluster(kmeans_result, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Perform k-means clustering with the most favored k from automated tools
k = 4
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
fviz_cluster(
kmeans_result,
data = scaled_df_no_outliers,
ellipse.type = "euclid",
star.plot = TRUE,
repel = TRUE,
ggtheme = theme_minimal()
)
# Plot clusters
fviz_cluster(kmeans_result, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers, geom = "point") +
geom_label(aes(label = class_labels[kmeans_result_pca$cluster]),
size = 3, alpha = 0.8, color = "white") +
scale_fill_manual(values = class_colors) +
theme(legend.position = "bottom")
# Add class labels and colors to the fviz_cluster plot
class_labels <- c("bus", "van", "saab", "opel")
class_colors <- c("#0072B2", "#E69F00", "#009E73", "#D55E00")
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers, geom = "point") +
geom_label(aes(label = class_labels[kmeans_result_pca$cluster]),
size = 3, alpha = 0.8, color = "white") +
scale_fill_manual(values = class_colors) +
theme(legend.position = "bottom")
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers, geom = "point") +
geom_label(aes(label = class_labels[kmeans_result_pca$cluster]),
size = 3, alpha = 0.8, color = "black") +
scale_fill_manual(values = class_colors) +
theme(legend.position = "bottom")
# Add class labels and colors to the fviz_cluster plot
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers, geom = "point") +
geom_label(aes(label = class_labels[kmeans_result_pca$cluster],
color = class_labels[kmeans_result_pca$cluster]),
size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors) +
theme(legend.position = "bottom")
# Add class labels and colors to the fviz_cluster plot
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers, geom = "point") +
geom_label(aes(label = class_labels[classes$Class],
color = class_labels[classes$Class]),
size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors) +
theme(legend.position = "bottom")
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(transformed_pca, Class = cars$Class),
aes(x = PC1, y = PC2, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(transformed_pca, Class = classes$Class),
aes(x = PC1, y = PC2, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = PC1, y = PC2, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = PC1, y = PC2, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the cluster assignments obtained from k-means clustering
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers, geom = "point") +
scale_color_manual(values = class_colors) +
theme(legend.position = "bottom")
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(kmeans_result, Class = classes$Class),
aes(x = kmeans_result, y = scaled_df_no_outliers, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(kmeans_result$cluster, Class = classes$Class),
aes(x = kmeans_result, y = scaled_df_no_outliers, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = kmeans_result, y = scaled_df_no_outliers, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the clusters with class labels
fviz_cluster(kmeans_result, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Perform k-means clustering with the most favored k from automated tools
k = 2
print(k)
kmeans_result_pca <- kmeans(transformed_pca_chosen, centers = k, nstart = 25)
kmeans_result_pca
# Visualize with cluster plot
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers)
# Plot clusters
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(kmeans_result_pca, Class = classes$Class),
aes(x = PC1, y = PC2, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = kmeans_result_pca, Class = classes$Class),
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(transformed_pca_chosen, Class = classes$Class),
aes(x = PC1, y = PC2, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Plot the PCA-transformed data points with color-coded class labels
ggplot(data = data.frame(transformed_pca_chosen, Class = classes$Class),
aes(x = PC1, y = PC2, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Define class labels and colors
class_labels <- c("bus", "van", "saab", "opel")
class_colors <- c("#0072B2", "#E69F00", "#009E73", "#D55E00")
# Plot the scaled data with color-coded points
ggplot(data = data.frame(scaled_df_no_outliers, Class = cars$Class),
aes(x = x, y = y, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the scaled data with color-coded points
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = x, y = y, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Define class labels and colors
class_labels <- c("bus", "van", "saab", "opel")
class_colors <- c("#0072B2", "#E69F00", "#009E73", "#D55E00")
# Plot the scaled data with color-coded points
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = x, y = y, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the scaled data with color-coded points
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = scaled_df_no_outliers[,1], y = scaled_df_no_outliers[,2], color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the scaled data with color-coded points
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = scaled_df_no_outliers[,1:18], y = scaled_df_no_outliers[,19], color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the scaled data with color-coded points
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = scaled_df_no_outliers[,1:18], y = classes, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the scaled data with color-coded points
ggplot(data = data.frame(scaled_df_no_outliers, Class = classes$Class),
aes(x = scaled_df_no_outliers, y = classes, color = Class)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = class_colors)
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Perform k-means clustering with the most favored k from automated tools
k = 3
print(k)
kmeans_result_pca <- kmeans(transformed_pca_chosen, centers = k, nstart = 25)
kmeans_result_pca
# Visualize with cluster plot
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers)
# Plot clusters
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2)
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, alpha = 0.8)
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, alpha = 0.6)
# Get the cluster assignments
cluster_assignments <- kmeans_result_pca$cluster
# Create a contingency table
table(cluster_assignments, cars$Class)
# Create a contingency table
table(cluster_assignments, classes$Class)
# Create a contingency table
table(kmeans_result$cluster, classes$Class)
# Perform k-means clustering with the most favored k from automated tools
k = 2
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
fviz_cluster(
kmeans_result,
data = scaled_df_no_outliers,
ellipse.type = "euclid",
star.plot = TRUE,
repel = TRUE,
ggtheme = theme_minimal()
)
# Plot clusters
fviz_cluster(kmeans_result, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Create a contingency table
table(kmeans_result$cluster, classes$Class)
# Create a contingency table for pca kmeans
table(kmeans_result_pca$cluster, classes$Class)
# Perform k-means clustering with the most favored k from automated tools
k = 3
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
fviz_cluster(
kmeans_result,
data = scaled_df_no_outliers,
ellipse.type = "euclid",
star.plot = TRUE,
repel = TRUE,
ggtheme = theme_minimal()
)
# Plot clusters
fviz_cluster(kmeans_result, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Create a contingency table for kmeans
table(kmeans_result$cluster, classes$Class)
# Perform k-means clustering with the most favored k from automated tools
k = 3
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
fviz_cluster(
kmeans_result,
data = scaled_df_no_outliers,
ellipse.type = "euclid",
star.plot = TRUE,
repel = TRUE,
ggtheme = theme_minimal()
)
# Plot clusters
fviz_cluster(kmeans_result, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Create a contingency table for kmeans
table(kmeans_result$cluster, classes$Class)
# Perform k-means clustering with the most favored k from automated tools
k = 3
print(k)
kmeans_result_pca <- kmeans(transformed_pca_chosen, centers = k, nstart = 25)
kmeans_result_pca
# Visualize with cluster plot
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers)
# Plot clusters
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, alpha = 0.6)
# Create a contingency table for pca kmeans
table(kmeans_result_pca$cluster, classes$Class)
# Performing PCA on the scaled dataset
pca <- prcomp(scaled_df_no_outliers, scale. = TRUE)
summary(pca)
# Extracting eigenvalues and eigenvectors
eigenvalues <- pca$sdev ^ 2
eigenvectors <- pca$rotation
# Printing eigenvalues and eigenvectors
cat("Eigenvalues:\n")
print(eigenvalues)
cat("\nEigenvectors:\n")
print(eigenvectors)
# Display scree plot
fviz_eig(pca, addlabels = TRUE)
# Graph of the variables (Biplott)
fviz_pca_var(pca)
# Calculating proportion of variance explained
PVE <- eigenvalues / sum(eigenvalues)
PVE
# PVE (aka scree) plot
plot(PVE)
title("PVE/scree plot")
# Cumulative PVE plot
plot(cumsum(PVE))
title("Cumulative Scree Plot")
# Calculating cumulative score per principal component
cumulative_score <- cumsum(eigenvalues / sum(eigenvalues) * 100)
# Printing cumulative score per principal component
cat("\nCumulative Score per Principal Component:\n")
print(cumulative_score)
# Choosin principal components with cumulative score > 92%
chosen_pcs <- which(cumulative_score < 92)
cat("\nChosen Principal Components:\n")
print(chosen_pcs)
# Creating a transformed dataset
transformed_pca <- predict(pca, scaled_df_no_outliers)
transformed_pca <- as.data.frame(transformed_pca)
transformed_pca
# Chosing only the pcs with >92 cumulative score
transformed_pca_chosen <- transformed_pca[, 1:5]#[, chosen_pcs]
transformed_pca_chosen
# Print the transformed dataset
cat("\nTransformed PCA Dataset with First 5 Chosen Principal Components:\n")
head(transformed_pca_chosen)
# Perform k-means clustering with the most favored k from automated tools
k = 3
print(k)
kmeans_result_pca <- kmeans(transformed_pca_chosen, centers = k, nstart = 25)
kmeans_result_pca
# Visualize with cluster plot
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers)
# Plot clusters
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, alpha = 0.6)
# Create a contingency table for pca kmeans
table(kmeans_result_pca$cluster, classes$Class)
set.seed(42)
nbclust_result <-
NbClust(
scaled_df_no_outliers,
distance = "euclidean",
min.nc = 2,
max.nc = 10,
method = "kmeans",
index = "all"
)
# Perform k-means clustering with the most favored k from automated tools
k = 7
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
# Plot clusters
fviz_cluster(kmeans_result, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Create a contingency table for kmeans
table(kmeans_result$cluster, classes$Class)
# Perform k-means clustering with the most favored k from automated tools
k = 2
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
fviz_cluster(
kmeans_result,
data = scaled_df_no_outliers,
ellipse.type = "euclid",
star.plot = TRUE,
repel = TRUE,
ggtheme = theme_minimal()
)
# Create a contingency table for kmeans
table(kmeans_result$cluster, classes$Class)
# Plot the clusters with class labels
fviz_cluster(kmeans_result, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
## Part F
# Automated tools for determining number of cluster centers
# NBclust methods
set.seed(42)
nbclust_result_pca <-
NbClust(
transformed_pca_chosen,
distance = "euclidean",
min.nc = 2,
max.nc = 10,
method = "kmeans",
index = "all"
)
# Perform k-means clustering with the most favored k from automated tools
k = 2
print(k)
kmeans_result_pca <- kmeans(transformed_pca_chosen, centers = k, nstart = 25)
kmeans_result_pca
# Visualize with cluster plot
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers)
# Plot clusters
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result_pca, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, alpha = 0.6)
# Create a contingency table for pca kmeans
table(kmeans_result_pca$cluster, classes$Class)
# Perform k-means clustering with the most favored k from automated tools
k = 3
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
# Create a contingency table for kmeans
table(kmeans_result$cluster, classes$Class)
# Perform k-means clustering with the most favored k from automated tools
k = 2
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
# Create a contingency table for kmeans
table(kmeans_result$cluster, classes$Class)
# Perform k-means clustering with the most favored k from automated tools
k = 3
print(k)
kmeans_result <-
kmeans(scaled_df_no_outliers, centers = k, nstart = 25)
kmeans_result
# Visualize
fviz_cluster(kmeans_result, data = scaled_df_no_outliers)
fviz_cluster(
kmeans_result,
data = scaled_df_no_outliers,
ellipse.type = "euclid",
star.plot = TRUE,
repel = TRUE,
ggtheme = theme_minimal()
)
# Plot clusters
fviz_cluster(kmeans_result, data = scaled_df_no_outliers,
geom = "point", stand = FALSE,
ellipse.type = "t", ggtheme = theme_minimal())
# Plot the clusters with class labels
fviz_cluster(kmeans_result, data = scaled_df_no_outliers) +
geom_label(aes(label = classes$Class), size = 2, color = "black")
# Create a contingency table for kmeans
table(kmeans_result$cluster, classes$Class)
View(kmeans_result)
View(kmeans_result_pca)
View(pca)
View(transformed_pca_chosen)
View(scaled_df_no_outliers)
View(df_no_outliers)
View(df18)
View(dfo)
View(classes)
